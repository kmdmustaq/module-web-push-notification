<?php
/**
 * Landofcoder
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Landofcoder.com license that is
 * available through the world-wide-web at this URL:
 * https://landofcoder.com/license
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to newer
 * version in the future.
 *
 * @category   Landofcoder
 * @package    Lof_WebPushNotification
 * @copyright  Copyright (c) 2021 Landofcoder (https://landofcoder.com/)
 * @license    https://landofcoder.com/LICENSE-1.0.html
 */
?>
<div class="lof-web-prompt" id="lof-web-prompt-id" style="display:none">
<div class="icon-plus gray w25"></div>
</div>
<?php
$serviceWorkerJs = $block->getUrl('webpushnotification/serviceWorker/index');
$helper   = $block->helperObject();
$publickey = $helper->getPublicKey();
$browser = $block->getBrowser();
?>
<script type="module" defer>
import {Workbox} from 'https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-window.prod.mjs';
require([
        "jquery",
        'mage/storage',
        '@firebase/app',
        '@firebase/messaging',
        '@firebase/analytics'
    ], function($, storage, firebase){
        'use strict';
        var firebaseConfig = {
            apiKey: '<?= $block->escapeHtml($helper->getFCMConfigEncrypted('fcm_app_api_key')) ?>',
            authDomain: '<?= $block->escapeHtml($helper->getFCMConfig('fcm_app_auth_domain')) ?>',
            databaseURL: '<?= $block->escapeHtml($helper->getFCMConfig('fcm_app_database_url')) ?>',
            projectId: '<?= $block->escapeHtml($helper->getFCMConfig('fcm_app_project_id')) ?>',
            storageBucket: '<?= $block->escapeHtml($helper->getFCMConfig('fcm_app_store_bucket')) ?>',
            messagingSenderId: '<?= $block->escapeHtml($helper->getFCMConfigEncrypted('fcm_app_sender_id')) ?>',
            appId: '<?= $block->escapeHtml($helper->getFCMConfigEncrypted('fcm_app_id')) ?>',
            measurementId: '<?= $block->escapeHtml($helper->getFCMConfigEncrypted('measurement_id')) ?>'
        };
        firebase.initializeApp(firebaseConfig);
        let isSubscribed;
        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

        function isSentServerToken() {
            return window.localStorage.getItem('sentServerToken') === '1';
        }

        function setSentServerToken(sentStatus) {
            window.localStorage.setItem('sentServerToken', sent ? '1' : '0');
        }

        function saveEndPointForLaterUse(registrationId, endpoint) {
            $.ajax({
                url: '<?= $block->escapeUrl($block->getUrl('webpushnotification/index/index'))?>',
                data: {
                    regId: registrationId,
                    endpoint: endpoint,
                },
                method: 'post',
                dataType: 'json',
                success: function() {
                    console.log("<?= $block->escapeHtml(__('You have successfully subscribed for push notifications!'))?>");
                }
            })
        }

        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                const wb = new Workbox('<?= $block->escapeHtml($serviceWorkerJs);?>');
                var Regis;
                wb.register().then(function(registration) {
                    Regis = registration;

                }).catch(function(error) {
                    console.log("Service Worker Registration Failed", error);
                });

                wb.addEventListener('activated', (event) => {
                    const urlsToCache = [
                        location.href,
                        ...performance.getEntriesByType('resource').map((r) => r.name),
                    ];
                    wb.messageSW({
                        type: 'CACHE_URLS',
                        payload: {urlsToCache},
                    });
                    if (firebase.messaging.isSupported()) {
                        if ('PushManager' in window) {
                            const messaging = firebase.messaging();
                            messaging.usePublicVapidKey('<?= $block->escapeHtml($publickey) ?>');
                            messaging.useServiceWorker(Regis);
                            initializeUI();
                        }
                    }
                });
                initInstaller();
            });
        } else {
            console.log('<?= $block->escapeHtml(__("Service Workers are not supported in this browser"))?>');
        }

        function initializeUI() {
                const messaging = firebase.messaging();
                messaging.getToken().then((curToken) => {
                        if (curToken) {
                            sendTokenToServer(curToken);
                        } else {
                            console.log('No Instance ID token available. Request permission to generate one.');
                            requestPermission();
                            setSentServerToken(false);
                        }
                    }).catch((err) => {
                        console.log('An error occurred while retrieving token. ', err);
                        setSentServerToken(false);
                    });
        }

        function sendTokenToServer(currentToken) {
            if (!isSentServerToken()) {
                console.log('Sending token to server...');
                setSentServerToken(true);
                saveEndPointForLaterUse(currentToken, currentToken)
            } else {
                console.log('Token already sent to server so won\'t send it again unless it changes.');
            }
        }

        function requestPermission() {
            console.log('Requesting permission...');
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    console.log('Notification permission granted.');
                    initializeUI();
                } else {
                    console.log('Unable to get permission to notify.');
                }
            });
        }
    }
)
function initInstaller() {
            let deferredPrompt;
            var win_wid = jQuery(window).width()
            var iframe = document.getElementsByTagName("iframe");
            if(iframe.length > 0)
            {
                var width = document.getElementsByTagName("iframe")[0].clientWidth;
            }
            window.addEventListener('beforeinstallprompt', function (e) {
                deferredPrompt = e;
                jQuery('#lof-web-prompt-id').css('display','block');
                if (!isMobile || (win_wid > "767") || ((iframe.length > 0) && !("295" <= width <= "688"))) {
                    if(jQuery('#lof-web-prompt-id').is(':visible')){
                        jQuery('#lof-web-prompt-id').css('margin-right','-8px');
                        jQuery('#lof-web-prompt-id').css('margin-top','5px');
                        jQuery('#lof-web-prompt-id').css('padding-left','5px');
                    }
                    jQuery('#lof-web-prompt-id').css('display','none');
                }
            })
            jQuery('.lof-web-prompt').on("click", function(){
                jQuery('#lof-web-prompt-id').css('display','none');
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then(function (choiceResult) {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('User accepted push notification');
                    } else {
                        console.log('User dismissed push notification');
                    }
                    deferredPrompt = null;
                })
            })
}
</script>